[gd_scene load_steps=30 format=2]

[ext_resource path="res://scenes/environment/Room.tscn" type="PackedScene" id=1]
[ext_resource path="res://assets/sfx/dialog/knock/knock6.wav" type="AudioStream" id=2]
[ext_resource path="res://assets/sfx/dialog/knock/knock1.wav" type="AudioStream" id=3]
[ext_resource path="res://assets/sfx/dialog/knock/knock3.wav" type="AudioStream" id=4]
[ext_resource path="res://assets/sfx/dialog/knock/knock4.wav" type="AudioStream" id=5]
[ext_resource path="res://assets/sfx/dialog/knock/knock5.wav" type="AudioStream" id=6]
[ext_resource path="res://assets/sfx/dialog/knock/knock2.wav" type="AudioStream" id=7]
[ext_resource path="res://utils/MultiAudioPlayer.tscn" type="PackedScene" id=8]
[ext_resource path="res://scenes/Act3.gd" type="Script" id=9]
[ext_resource path="res://scenes/characters/puppets/PlayerPuppet.tscn" type="PackedScene" id=10]
[ext_resource path="res://scenes/characters/puppets/Waypoints.tscn" type="PackedScene" id=11]
[ext_resource path="res://assets/environment/room/particles_wall_cover.png" type="Texture" id=12]
[ext_resource path="res://assets/sfx/scene/act1/open_door.wav" type="AudioStream" id=13]
[ext_resource path="res://utils/DialogPlayer.tscn" type="PackedScene" id=14]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 hit_color : hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float hit_strength : hint_range(0.0,1.0) = 0.0;

void fragment() {
	vec4 custom_color = texture(TEXTURE, UV);
	custom_color.rgb = mix(custom_color.rgb, hit_color.rgb, hit_strength);
	COLOR = custom_color;
}"

[sub_resource type="ShaderMaterial" id=69]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/hit_color = Color( 0.705882, 0.12549, 0.164706, 1 )
shader_param/hit_strength = 0.0

[sub_resource type="Shader" id=6]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float line_scale : hint_range(0, 4) = 1.0;

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * line_scale * TEXTURE_PIXEL_SIZE * 100.0;
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * line_scale;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		
		vec2 outline_uv = regular_uv + vec2(1.0 * ps.x, 0.0 * ps.y); 
		vec4 outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(-1.0 * ps.x, 0.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, -1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, 1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=58]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=59]
resource_local_to_scene = true

[sub_resource type="ShaderMaterial" id=60]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=61]
resource_local_to_scene = true

[sub_resource type="ShaderMaterial" id=62]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=63]
resource_local_to_scene = true

[sub_resource type="ShaderMaterial" id=64]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=65]
resource_local_to_scene = true

[sub_resource type="Shader" id=57]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float line_scale : hint_range(0, 4) = 1.0;

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * line_scale * TEXTURE_PIXEL_SIZE * 100.0;
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * line_scale;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		
		vec2 outline_uv = regular_uv + vec2(1.0 * ps.x, 0.0 * ps.y); 
		vec4 outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(-1.0 * ps.x, 0.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, -1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, 1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=66]
resource_local_to_scene = true
shader = SubResource( 57 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=67]
resource_local_to_scene = true

[sub_resource type="AudioStreamRandomPitch" id=68]
resource_local_to_scene = true

[node name="Act3" instance=ExtResource( 1 )]
script = ExtResource( 9 )
next_scene = "res://scenes/Act1.tscn"
friend_dialog = [ "Hey, I know you're in there.", "You've been in there so long... I've forgotten the days we spent together.", "But I know I liked the chemistry we had together.", "I'm struggling out there. I want to go back to what it was.", "I know it wasn't great out there, but I know that if we work together, we can deal with it.", "Please...", "I miss you so much." ]

[node name="Cover" parent="Outside/Cover" index="0"]
modulate = Color( 1, 1, 1, 1 )

[node name="Window" parent="Outside/Cover" index="1"]
modulate = Color( 1, 1, 1, 0 )

[node name="PlayerPuppet" parent="." index="3" instance=ExtResource( 10 )]
material = SubResource( 69 )
position = Vector2( 326, 249 )
z_index = 153
frame = 3
waypoints_path = NodePath("../Waypoints")
start_left = true

[node name="YSort" parent="." index="4"]
modulate = Color( 1, 1, 1, 0 )

[node name="Desk" parent="YSort/RoomElements/Enterables" index="0"]
material = SubResource( 58 )

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Desk" index="5"]
stream = SubResource( 59 )

[node name="Window" parent="YSort/RoomElements/Enterables" index="1"]
material = SubResource( 60 )

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Window" index="5"]
stream = SubResource( 61 )

[node name="Weights" parent="YSort/RoomElements/Enterables" index="2"]
material = SubResource( 62 )

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Weights" index="5"]
stream = SubResource( 63 )

[node name="Bed" parent="YSort/RoomElements/Enterables" index="3"]
material = SubResource( 64 )

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Bed" index="5"]
stream = SubResource( 65 )

[node name="Door" parent="YSort/RoomElements/Enterables" index="4"]
material = SubResource( 66 )

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Door" index="5"]
stream = SubResource( 67 )

[node name="Shelf" parent="YSort/RoomElements/Enterables" index="5"]
material = SubResource( 66 )

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Shelf" index="5"]
stream = SubResource( 67 )

[node name="ParticlesWallCover" type="Sprite" parent="YSort" index="1"]
visible = false
position = Vector2( 326, 200 )
z_index = 588
texture = ExtResource( 12 )

[node name="Camera2D" type="Camera2D" parent="." index="6"]
position = Vector2( 326, 200 )
z_index = 327
current = true

[node name="Knock1" parent="." index="7" instance=ExtResource( 8 )]
stream = SubResource( 68 )
audio_streams = [ ExtResource( 3 ), ExtResource( 7 ), ExtResource( 4 ), ExtResource( 5 ), ExtResource( 6 ), ExtResource( 2 ) ]

[node name="Knock2" parent="." index="8" instance=ExtResource( 8 )]
stream = SubResource( 68 )
audio_streams = [ ExtResource( 3 ), ExtResource( 7 ), ExtResource( 4 ), ExtResource( 5 ), ExtResource( 6 ), ExtResource( 2 ) ]

[node name="Waypoints" parent="." index="9" instance=ExtResource( 11 )]
z_index = 136

[node name="Position2D" type="Position2D" parent="Waypoints" index="0"]
position = Vector2( 326, 249 )

[node name="Position2D2" type="Position2D" parent="Waypoints" index="1"]
position = Vector2( 252, 243 )

[node name="Position2D3" type="Position2D" parent="Waypoints" index="2"]
position = Vector2( 240, 234 )

[node name="Position2D4" type="Position2D" parent="Waypoints" index="3"]
position = Vector2( 133, 136 )

[node name="DoorOpen" type="AudioStreamPlayer2D" parent="." index="10"]
position = Vector2( 246, 215 )
stream = ExtResource( 13 )
bus = "SFX"

[node name="CanvasLayer" type="CanvasLayer" parent="." index="11"]

[node name="DialogPlayer" parent="CanvasLayer" index="0" instance=ExtResource( 14 )]
character = 4
autoplay = true
