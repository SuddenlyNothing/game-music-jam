[gd_scene load_steps=26 format=2]

[ext_resource path="res://scenes/environment/Room.tscn" type="PackedScene" id=1]
[ext_resource path="res://scenes/characters/puppets/PlayerPuppet.tscn" type="PackedScene" id=2]
[ext_resource path="res://scenes/Act1.gd" type="Script" id=3]
[ext_resource path="res://scenes/characters/puppets/Waypoints.tscn" type="PackedScene" id=4]
[ext_resource path="res://utils/DialogPlayer.tscn" type="PackedScene" id=5]
[ext_resource path="res://scenes/ui/Menu.tscn" type="PackedScene" id=6]
[ext_resource path="res://scenes/ui/Hint.tscn" type="PackedScene" id=7]
[ext_resource path="res://scenes/environment/MinigamesManager.tscn" type="PackedScene" id=8]

[sub_resource type="Shader" id=6]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float line_scale : hint_range(0, 4) = 1.0;

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * line_scale * TEXTURE_PIXEL_SIZE * 100.0;
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * line_scale;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		
		vec2 outline_uv = regular_uv + vec2(1.0 * ps.x, 0.0 * ps.y); 
		vec4 outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(-1.0 * ps.x, 0.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, -1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, 1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=7]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=50]
resource_local_to_scene = true

[sub_resource type="ShaderMaterial" id=8]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=51]
resource_local_to_scene = true

[sub_resource type="ShaderMaterial" id=9]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=52]
resource_local_to_scene = true

[sub_resource type="ShaderMaterial" id=10]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=53]
resource_local_to_scene = true

[sub_resource type="Shader" id=48]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float line_scale : hint_range(0, 4) = 1.0;

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * line_scale * TEXTURE_PIXEL_SIZE * 100.0;
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * line_scale;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		
		vec2 outline_uv = regular_uv + vec2(1.0 * ps.x, 0.0 * ps.y); 
		vec4 outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(-1.0 * ps.x, 0.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, -1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, 1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=54]
resource_local_to_scene = true
shader = SubResource( 48 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=55]
resource_local_to_scene = true

[sub_resource type="Shader" id=57]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float line_scale : hint_range(0, 4) = 1.0;

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * line_scale * TEXTURE_PIXEL_SIZE * 100.0;
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * line_scale;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		
		vec2 outline_uv = regular_uv + vec2(1.0 * ps.x, 0.0 * ps.y); 
		vec4 outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(-1.0 * ps.x, 0.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, -1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, 1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=59]
resource_local_to_scene = true
shader = SubResource( 57 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=58]
resource_local_to_scene = true

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 hit_color : hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float hit_strength : hint_range(0.0,1.0) = 0.0;

void fragment() {
	vec4 custom_color = texture(TEXTURE, UV);
	custom_color.rgb = mix(custom_color.rgb, hit_color.rgb, hit_strength);
	COLOR = custom_color;
}"

[sub_resource type="ShaderMaterial" id=60]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/hit_color = Color( 0.705882, 0.12549, 0.164706, 1 )
shader_param/hit_strength = 0.0

[node name="Act1" instance=ExtResource( 1 )]
script = ExtResource( 3 )
next_scene = "res://scenes/Act2.tscn"
starve_scene = "res://scenes/end_screens/StarveScreen.tscn"
season_dur = 2.0
betwee_dur = 4.0
intro_dialogs = [ [ "Stupid! Stupid! Stupid!", "Why do I even go there? To learn? What a joke!", "That sad excuse for a garbage dump isn't fit for dogs!" ], [ "I hate it here!", "[shake level=13]Why!?[/shake] [shake rate=3]Why won't anyone help? Why doesn't anyone look at me?", "[shake rate=3][fade start=10 length=45]Why will no one sit with me and talk with me?" ], [ "I don't want to go back.", "There's only pain there." ], [ "What if I stay here?", "Will they notice?" ], [ "I'm safe here. No one will know.", "I will play by myself until I get better." ] ]
end_dialog = [ "That was an awesome day!", "I think I'll enjoy living like this." ]

[node name="Summer" parent="Outside" index="0"]
visible = false

[node name="Winter" parent="Outside" index="2"]
visible = true
z_index = 60

[node name="RoomElements" parent="YSort" index="0"]
modulate = Color( 1, 1, 1, 0 )

[node name="Desk" parent="YSort/RoomElements/Enterables" index="0"]
material = SubResource( 7 )

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Desk" index="5"]
stream = SubResource( 50 )

[node name="Window" parent="YSort/RoomElements/Enterables" index="1"]
material = SubResource( 8 )

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Window" index="5"]
stream = SubResource( 51 )

[node name="Weights" parent="YSort/RoomElements/Enterables" index="2"]
material = SubResource( 9 )

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Weights" index="5"]
stream = SubResource( 52 )

[node name="Bed" parent="YSort/RoomElements/Enterables" index="3"]
material = SubResource( 10 )

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Bed" index="5"]
stream = SubResource( 53 )

[node name="MinigamesManager" parent="YSort/RoomElements/Enterables/Bed" index="6" instance=ExtResource( 8 )]
has_boredom = false
max_points = 200

[node name="Door" parent="YSort/RoomElements/Enterables" index="4"]
material = SubResource( 54 )

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Door" index="5"]
stream = SubResource( 55 )

[node name="Shelf" parent="YSort/RoomElements/Enterables" index="5"]
material = SubResource( 59 )

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Shelf" index="5"]
stream = SubResource( 58 )

[node name="Waypoints" parent="YSort" index="1" instance=ExtResource( 4 )]
position = Vector2( -32, -1 )

[node name="Position2D" type="Position2D" parent="YSort/Waypoints" index="0"]
position = Vector2( 322, -5 )

[node name="Position2D2" type="Position2D" parent="YSort/Waypoints" index="1"]
position = Vector2( 126, 95 )

[node name="Position2D7" type="Position2D" parent="YSort/Waypoints" index="2"]
position = Vector2( 183, 144 )

[node name="Position2D8" type="Position2D" parent="YSort/Waypoints" index="3"]
position = Vector2( 250, 109 )

[node name="Position2D3" type="Position2D" parent="YSort/Waypoints" index="4"]
position = Vector2( 257, 231 )

[node name="Position2D4" type="Position2D" parent="YSort/Waypoints" index="5"]
position = Vector2( 279, 241 )

[node name="Position2D5" type="Position2D" parent="YSort/Waypoints" index="6"]
position = Vector2( 301, 249 )

[node name="Position2D6" type="Position2D" parent="YSort/Waypoints" index="7"]
position = Vector2( 351, 251 )

[node name="PlayerPuppet" parent="YSort" index="2" instance=ExtResource( 2 )]
material = SubResource( 60 )
position = Vector2( 290, -6 )
z_index = -130
waypoints_path = NodePath("../Waypoints")
outside = true

[node name="Camera2D" type="Camera2D" parent="YSort/PlayerPuppet" index="0"]
current = true
limit_left = 0
limit_top = 0
limit_right = 384
limit_bottom = 256

[node name="CanvasLayer" type="CanvasLayer" parent="." index="4"]

[node name="DialogPlayer" parent="CanvasLayer" index="0" instance=ExtResource( 5 )]

[node name="Menu" parent="CanvasLayer" index="1" instance=ExtResource( 6 )]

[node name="Hint" parent="." index="5" instance=ExtResource( 7 )]
hint_name = "start_room"
label_hint = "Press {up}, {down}, {left}, {right} to move."

[node name="MinigamesManager" parent="." index="6"]
has_boredom = false
has_difficulty = false
max_points = 200

[connection signal="completed_task" from="YSort/RoomElements/Enterables/Bed/MinigamesManager" to="." method="_on_MinigamesManager_completed_task"]
[connection signal="do_event" from="YSort/RoomElements/Enterables/Bed/MinigamesManager" to="." method="_on_MinigamesManager_do_event"]
[connection signal="view_street" from="YSort/RoomElements/Enterables/Bed/MinigamesManager" to="." method="_on_MinigamesManager_view_street"]
[connection signal="reached_last_waypoint" from="YSort/PlayerPuppet" to="." method="_on_PlayerPuppet_reached_last_waypoint"]
[connection signal="reached_waypoint" from="YSort/PlayerPuppet" to="." method="_on_PlayerPuppet_reached_waypoint"]
[connection signal="started" from="CanvasLayer/Menu" to="." method="_on_Menu_started"]
[connection signal="completed" from="Hint" to="." method="_on_Hint_completed"]
[connection signal="completed_task" from="MinigamesManager" to="." method="_on_MinigamesManager_completed_task"]
[connection signal="do_event" from="MinigamesManager" to="." method="_on_MinigamesManager_do_event"]
[connection signal="view_street" from="MinigamesManager" to="." method="_on_MinigamesManager_view_street"]
