[gd_scene load_steps=28 format=2]

[ext_resource path="res://scenes/environment/Room.tscn" type="PackedScene" id=1]
[ext_resource path="res://scenes/characters/players/RoomPlayer.tscn" type="PackedScene" id=2]
[ext_resource path="res://utils/DialogPlayer.tscn" type="PackedScene" id=3]
[ext_resource path="res://scenes/Act2.gd" type="Script" id=4]
[ext_resource path="res://utils/MultiAudioPlayer.tscn" type="PackedScene" id=5]
[ext_resource path="res://assets/sfx/dialog/knock/knock6.wav" type="AudioStream" id=6]
[ext_resource path="res://assets/sfx/dialog/knock/knock1.wav" type="AudioStream" id=7]
[ext_resource path="res://assets/sfx/dialog/knock/knock3.wav" type="AudioStream" id=8]
[ext_resource path="res://assets/sfx/dialog/knock/knock2.wav" type="AudioStream" id=9]
[ext_resource path="res://assets/sfx/dialog/knock/knock4.wav" type="AudioStream" id=10]
[ext_resource path="res://assets/sfx/dialog/knock/knock5.wav" type="AudioStream" id=11]

[sub_resource type="Shader" id=6]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float line_scale : hint_range(0, 4) = 1.0;

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * line_scale * TEXTURE_PIXEL_SIZE * 100.0;
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * line_scale;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		
		vec2 outline_uv = regular_uv + vec2(1.0 * ps.x, 0.0 * ps.y); 
		vec4 outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(-1.0 * ps.x, 0.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, -1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, 1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=7]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=51]
resource_local_to_scene = true

[sub_resource type="ShaderMaterial" id=8]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=52]
resource_local_to_scene = true

[sub_resource type="ShaderMaterial" id=9]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=53]
resource_local_to_scene = true

[sub_resource type="ShaderMaterial" id=10]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=54]
resource_local_to_scene = true

[sub_resource type="Shader" id=48]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float line_scale : hint_range(0, 4) = 1.0;

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * line_scale * TEXTURE_PIXEL_SIZE * 100.0;
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * line_scale;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		
		vec2 outline_uv = regular_uv + vec2(1.0 * ps.x, 0.0 * ps.y); 
		vec4 outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(-1.0 * ps.x, 0.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, -1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, 1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=55]
resource_local_to_scene = true
shader = SubResource( 48 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=56]
resource_local_to_scene = true

[sub_resource type="Shader" id=57]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float line_scale : hint_range(0, 4) = 1.0;

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * line_scale * TEXTURE_PIXEL_SIZE * 100.0;
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * line_scale;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		
		vec2 outline_uv = regular_uv + vec2(1.0 * ps.x, 0.0 * ps.y); 
		vec4 outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(-1.0 * ps.x, 0.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, -1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, 1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=58]
resource_local_to_scene = true
shader = SubResource( 57 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=59]
resource_local_to_scene = true

[sub_resource type="AudioStreamRandomPitch" id=60]
resource_local_to_scene = true

[node name="Act2" instance=ExtResource( 1 )]
script = ExtResource( 4 )
next_scene = ""
start_dialog = [ "That wasn't nearly enough food.", "I should get some more." ]
food_dialog = [ [ "I'm feeling a little hungry." ], [ "I need some more energy." ], [ "I can feel my stomach rumbling." ], [ "I'm feeling lightheaded.", "I gotta have some food." ], [ "Gotta get some food." ], [ "**Grrrrrrr**", "That's the bell for more food." ] ]

[node name="YSort" parent="." index="3"]
modulate = Color( 1, 1, 1, 0 )

[node name="Desk" parent="YSort/RoomElements/Enterables" index="0"]
material = SubResource( 7 )
enter_text = [ [ "My butt doesn't feel so good.", "I've been sitting down too much." ], [ "Are there any new games? This one's getting kinda boring." ], [ "So many unread emails...", "Must be spam." ] ]

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Desk" index="5"]
stream = SubResource( 51 )

[node name="Window" parent="YSort/RoomElements/Enterables" index="1"]
material = SubResource( 8 )
enter_text = [ [ "It's so bright outside! Maybe I should get some blinds." ], [ "Just thinking about the snow is making me cold." ], [ "Should I go outside and make some snowmen?", "Nah.... They'd just get knocked down." ] ]

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Window" index="5"]
stream = SubResource( 52 )

[node name="Weights" parent="YSort/RoomElements/Enterables" index="2"]
material = SubResource( 9 )
enter_text = [ [ "I don't seem to be getting any stronger." ], [ "These weights just keep getting heavier and heavier." ], [ "I'm struggling so much.... Maybe I should give up." ] ]

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Weights" index="5"]
stream = SubResource( 53 )

[node name="Bed" parent="YSort/RoomElements/Enterables" index="3"]
material = SubResource( 10 )
enter_text = [ [ "I feel exhausted." ], [ "I wish I could just lie here forever." ], [ "Ah... so warm!" ] ]

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Bed" index="5"]
stream = SubResource( 54 )

[node name="Door" parent="YSort/RoomElements/Enterables" index="4"]
material = SubResource( 55 )
disabled_dialog = [ "Brrr... It's too cold to go outside.", "Inside is much better." ]

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Door" index="5"]
stream = SubResource( 56 )

[node name="Shelf" parent="YSort/RoomElements/Enterables" index="5"]
material = SubResource( 58 )
disabled_dialog = [ "Maybe I should throw these books away..." ]

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Shelf" index="5"]
stream = SubResource( 59 )

[node name="RoomPlayer" parent="YSort" index="1" instance=ExtResource( 2 )]
position = Vector2( 326, 264 )
act = "2"
locked = true
start_left = true

[node name="MinigamesManager" parent="." index="4"]
max_points = 300
character = 1
start_difficulty = 0.1

[node name="CanvasLayer" type="CanvasLayer" parent="." index="5"]

[node name="DialogPlayer" parent="CanvasLayer" index="0" instance=ExtResource( 3 )]
character = 1

[node name="Fade" type="ColorRect" parent="CanvasLayer" index="1"]
visible = false
modulate = Color( 1, 1, 1, 0 )
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 1 )

[node name="Camera2D" type="Camera2D" parent="." index="6"]
position = Vector2( 192, 128 )
current = true

[node name="Knock1" parent="." index="7" instance=ExtResource( 5 )]
stream = SubResource( 60 )
audio_streams = [ ExtResource( 7 ), ExtResource( 9 ), ExtResource( 8 ), ExtResource( 10 ), ExtResource( 11 ), ExtResource( 6 ) ]

[node name="Knock2" parent="." index="8" instance=ExtResource( 5 )]
stream = SubResource( 60 )
audio_streams = [ ExtResource( 7 ), ExtResource( 9 ), ExtResource( 8 ), ExtResource( 10 ), ExtResource( 11 ), ExtResource( 6 ) ]

[connection signal="completed_task" from="MinigamesManager" to="." method="_on_MinigamesManager_completed_task"]
[connection signal="do_event" from="MinigamesManager" to="." method="_on_MinigamesManager_do_event"]
[connection signal="view_street" from="MinigamesManager" to="." method="_on_MinigamesManager_view_street"]
