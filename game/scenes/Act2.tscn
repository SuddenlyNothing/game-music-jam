[gd_scene load_steps=43 format=2]

[ext_resource path="res://scenes/environment/Room.tscn" type="PackedScene" id=1]
[ext_resource path="res://scenes/characters/players/RoomPlayer.tscn" type="PackedScene" id=2]
[ext_resource path="res://utils/DialogPlayer.tscn" type="PackedScene" id=3]
[ext_resource path="res://scenes/Act2.gd" type="Script" id=4]
[ext_resource path="res://utils/MultiAudioPlayer.tscn" type="PackedScene" id=5]
[ext_resource path="res://assets/sfx/dialog/knock/knock6.wav" type="AudioStream" id=6]
[ext_resource path="res://assets/sfx/dialog/knock/knock1.wav" type="AudioStream" id=7]
[ext_resource path="res://assets/sfx/dialog/knock/knock3.wav" type="AudioStream" id=8]
[ext_resource path="res://assets/sfx/dialog/knock/knock2.wav" type="AudioStream" id=9]
[ext_resource path="res://assets/sfx/dialog/knock/knock4.wav" type="AudioStream" id=10]
[ext_resource path="res://assets/sfx/dialog/knock/knock5.wav" type="AudioStream" id=11]
[ext_resource path="res://scenes/characters/puppets/PlayerPuppet.tscn" type="PackedScene" id=12]
[ext_resource path="res://scenes/characters/puppets/Waypoints.tscn" type="PackedScene" id=13]
[ext_resource path="res://scenes/environment/FoodParticles.tscn" type="PackedScene" id=14]
[ext_resource path="res://assets/environment/room/particles_wall_cover.png" type="Texture" id=15]
[ext_resource path="res://assets/sfx/scene/act1/open_door.wav" type="AudioStream" id=16]
[ext_resource path="res://scenes/environment/FoodSpawner.tscn" type="PackedScene" id=17]
[ext_resource path="res://assets/sfx/scene/act1/close_door.wav" type="AudioStream" id=18]

[sub_resource type="Shader" id=6]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float line_scale : hint_range(0, 4) = 1.0;

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * line_scale * TEXTURE_PIXEL_SIZE * 100.0;
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * line_scale;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		
		vec2 outline_uv = regular_uv + vec2(1.0 * ps.x, 0.0 * ps.y); 
		vec4 outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(-1.0 * ps.x, 0.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, -1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, 1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=7]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=51]
resource_local_to_scene = true

[sub_resource type="ShaderMaterial" id=8]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=52]
resource_local_to_scene = true

[sub_resource type="ShaderMaterial" id=9]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=53]
resource_local_to_scene = true

[sub_resource type="ShaderMaterial" id=10]
resource_local_to_scene = true
shader = SubResource( 6 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=54]
resource_local_to_scene = true

[sub_resource type="Shader" id=48]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float line_scale : hint_range(0, 4) = 1.0;

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * line_scale * TEXTURE_PIXEL_SIZE * 100.0;
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * line_scale;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		
		vec2 outline_uv = regular_uv + vec2(1.0 * ps.x, 0.0 * ps.y); 
		vec4 outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(-1.0 * ps.x, 0.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, -1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, 1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=55]
resource_local_to_scene = true
shader = SubResource( 48 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=56]
resource_local_to_scene = true

[sub_resource type="Shader" id=57]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float line_scale : hint_range(0, 4) = 1.0;

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * line_scale * TEXTURE_PIXEL_SIZE * 100.0;
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * line_scale;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		
		vec2 outline_uv = regular_uv + vec2(1.0 * ps.x, 0.0 * ps.y); 
		vec4 outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(-1.0 * ps.x, 0.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, -1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
		
		outline_uv = regular_uv + vec2(0.0 * ps.x, 1.0 * ps.y); 
		outline_sample = texture(TEXTURE, outline_uv);
		if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
			outline_sample = vec4(0);
		}
		if(outline_sample.a > final_color.a){
			final_color = outline_color;
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=58]
resource_local_to_scene = true
shader = SubResource( 57 )
shader_param/line_scale = 0.0
shader_param/outline_color = Color( 1, 1, 1, 1 )

[sub_resource type="AudioStreamRandomPitch" id=59]
resource_local_to_scene = true

[sub_resource type="Shader" id=64]
code = "shader_type canvas_item;
uniform float UPDATE_INTERVAL = .163;
uniform float STATIC_GRANULARITY = .005;
uniform float EDGE_BLUR = .5;
uniform float BORDER_SIZE = .3;

float generate_random_static (in float size, in float interval, in vec2 uv){
	float time_step = TIME - mod(TIME,interval);
	vec2 uv_step = uv - mod(uv, size);
	return fract(sin(dot(uv_step,vec2(12.0278*sin(time_step),15.0905)))*43758.5453);
}

vec2 get_polar_coords (vec2 center, vec2 uv){
	vec2 pos = uv-center;
	float r = length(pos);
	float theta = atan(pos.y,pos.x);
	return vec2(r,theta);
}

vec4 layer (in vec4 front_color, in vec4 back_color){
	return vec4(mix(back_color.rgb,front_color.rgb,front_color.a),front_color.a+back_color.a);
}

void fragment() {
	if (EDGE_BLUR > 0.0) {
		vec3 static_plot = vec3(generate_random_static(STATIC_GRANULARITY,UPDATE_INTERVAL,UV));
		
		vec2 c1 = vec2(0.5);
		vec2 pv1 = get_polar_coords(c1,UV);
		float func = BORDER_SIZE-.015*cos(4.0*pv1.y);
		float border_plot = smoothstep(func,func+EDGE_BLUR, pv1.x);
		vec4 border_color = vec4(vec3(0.0),1.0)*border_plot;
		COLOR = vec4(static_plot,.1);
		COLOR = layer(COLOR,border_color);
	}
}"

[sub_resource type="ShaderMaterial" id=65]
shader = SubResource( 64 )
shader_param/UPDATE_INTERVAL = 0.01
shader_param/STATIC_GRANULARITY = 0.004
shader_param/EDGE_BLUR = 3.0
shader_param/BORDER_SIZE = 0.0

[sub_resource type="AudioStreamRandomPitch" id=60]
resource_local_to_scene = true

[sub_resource type="Shader" id=61]
code = "/*
	Glitch Effect Shader by Yui Kinomoto @arlez80

	MIT License
*/

shader_type canvas_item;

// 振動の強さ
uniform float shake_power = 0.03;
// 振動率
uniform float shake_rate : hint_range( 0.0, 1.0 ) = 0.2;
// 振動速度
uniform float shake_speed = 5.0;
// 振動ブロックサイズ
uniform float shake_block_size = 30.5;
// 色の分離率
uniform float shake_color_rate : hint_range( 0.0, 1.0 ) = 0.01;

float random( float seed )
{
	return fract( 543.2543 * sin( dot( vec2( seed, seed ), vec2( 3525.46, -54.3415 ) ) ) );
}

void fragment( )
{
	float enable_shift = float(
		random( trunc( TIME * shake_speed ) )
	<	shake_rate
	);

	vec2 fixed_uv = UV;
	fixed_uv.x += (
		random(
			( trunc( UV.y * shake_block_size ) / shake_block_size )
		+	TIME
		) - 0.5
	) * shake_power * enable_shift;

	vec4 pixel_color = textureLod( TEXTURE, fixed_uv, 0.0 );
	pixel_color.r = mix(
		pixel_color.r
	,	textureLod( TEXTURE, fixed_uv + vec2( shake_color_rate, 0.0 ), 0.0 ).r
	,	enable_shift
	);
	pixel_color.b = mix(
		pixel_color.b
	,	textureLod( TEXTURE, fixed_uv + vec2( -shake_color_rate, 0.0 ), 0.0 ).b
	,	enable_shift
	);
	COLOR = pixel_color;
}
"

[sub_resource type="ShaderMaterial" id=62]
shader = SubResource( 61 )
shader_param/shake_power = 0.03
shader_param/shake_rate = 0.2
shader_param/shake_speed = 5.0
shader_param/shake_block_size = 30.5
shader_param/shake_color_rate = 0.01

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 hit_color : hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float hit_strength : hint_range(0.0,1.0) = 0.0;

void fragment() {
	vec4 custom_color = texture(TEXTURE, UV);
	custom_color.rgb = mix(custom_color.rgb, hit_color.rgb, hit_strength);
	COLOR = custom_color;
}"

[sub_resource type="ShaderMaterial" id=63]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/hit_color = Color( 1, 1, 1, 1 )
shader_param/hit_strength = 0.0

[sub_resource type="Shader" id=66]
code = "shader_type canvas_item;

uniform vec4 hit_color : hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float hit_strength : hint_range(0.0,1.0) = 0.0;

void fragment() {
	vec4 custom_color = texture(TEXTURE, UV);
	custom_color.rgb = mix(custom_color.rgb, hit_color.rgb, hit_strength);
	COLOR = custom_color;
}"

[sub_resource type="ShaderMaterial" id=67]
resource_local_to_scene = true
shader = SubResource( 66 )
shader_param/hit_color = Color( 0.705882, 0.12549, 0.164706, 1 )
shader_param/hit_strength = 0.0

[node name="Act2" instance=ExtResource( 1 )]
script = ExtResource( 4 )
next_scene = "res://scenes/tasks/BossTask.tscn"
start_dialog = [ "That wasn't nearly enough food.", "I should get some more." ]
food_dialog = [ [ "I'm feeling a little hungry." ], [ "I need some more energy." ], [ "I can feel my stomach rumbling." ], [ "I'm feeling lightheaded.", "I gotta have some food." ], [ "Gotta get some food." ], [ "**Grrrrrrr**", "That's the bell for more food." ] ]

[node name="YSort" parent="." index="3"]
modulate = Color( 1, 1, 1, 0 )

[node name="Desk" parent="YSort/RoomElements/Enterables" index="0"]
material = SubResource( 7 )
voice = 1
enter_text = [ [ "I've been sitting down too much. My butt hurts." ], [ "Are there any new games? This one's getting kinda boring." ], [ "So many unread emails...", "Must be spam." ] ]

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Desk" index="5"]
stream = SubResource( 51 )

[node name="Window" parent="YSort/RoomElements/Enterables" index="1"]
material = SubResource( 8 )
voice = 1
enter_text = [ [ "It's so bright outside! Maybe I should get some blinds." ], [ "Just thinking about the snow is making me cold." ], [ "Should I go outside and make some snowmen?", "Nah.... They'd just get knocked down." ] ]

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Window" index="5"]
stream = SubResource( 52 )

[node name="Weights" parent="YSort/RoomElements/Enterables" index="2"]
material = SubResource( 9 )
voice = 1
enter_text = [ [ "I don't seem to be getting any stronger." ], [ "These weights just keep getting heavier and heavier." ], [ "I'm struggling so much.... Maybe I should give up." ] ]

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Weights" index="5"]
stream = SubResource( 53 )

[node name="Bed" parent="YSort/RoomElements/Enterables" index="3"]
material = SubResource( 10 )
voice = 1
enter_text = [ [ "I feel exhausted." ], [ "I wish I could just lie here forever." ], [ "Ah... so warm!" ] ]

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Bed" index="5"]
stream = SubResource( 54 )

[node name="Door" parent="YSort/RoomElements/Enterables" index="4"]
material = SubResource( 55 )
voice = 1
disabled_dialog = [ "Brrr... It's too cold to go outside.", "Inside is much better." ]

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Door" index="5"]
stream = SubResource( 56 )

[node name="Shelf" parent="YSort/RoomElements/Enterables" index="5"]
material = SubResource( 58 )
voice = 1
disabled_dialog = [ "Maybe I should throw these books away..." ]

[node name="EnterSFX" parent="YSort/RoomElements/Enterables/Shelf" index="5"]
stream = SubResource( 59 )

[node name="FoodParticles" parent="YSort/RoomElements" index="6" instance=ExtResource( 14 )]
position = Vector2( -92, 18 )
z_index = 471

[node name="FoodSpawner" parent="YSort/RoomElements" index="7" instance=ExtResource( 17 )]
position = Vector2( -92, 20 )
z_index = 565

[node name="ParticlesWallCover" type="Sprite" parent="YSort/RoomElements" index="8"]
visible = false
z_index = 588
texture = ExtResource( 15 )

[node name="RoomPlayer" parent="YSort" index="1" instance=ExtResource( 2 )]
position = Vector2( 326, 264 )
act = "2"
locked = true
start_left = true

[node name="CanvasLayer" type="CanvasLayer" parent="." index="4"]
layer = 2

[node name="ScreenRect" type="ColorRect" parent="CanvasLayer" index="0"]
modulate = Color( 1, 1, 1, 0 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 0, 0, 0, 1 )

[node name="DialogPlayer" parent="CanvasLayer" index="1" instance=ExtResource( 3 )]
character = 1

[node name="Fade" type="ColorRect" parent="CanvasLayer" index="2"]
visible = false
modulate = Color( 1, 1, 1, 0 )
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 1 )

[node name="StaticOverlay" type="ColorRect" parent="CanvasLayer" index="3"]
visible = false
modulate = Color( 1, 1, 1, 0 )
material = SubResource( 65 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 0, 0, 0, 1 )

[node name="BlackOverlay" type="ColorRect" parent="CanvasLayer" index="4"]
visible = false
modulate = Color( 1, 1, 1, 0 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 0, 0, 0, 1 )

[node name="Camera2D" type="Camera2D" parent="." index="5"]
position = Vector2( 192, 128 )
current = true

[node name="Knock1" parent="." index="6" instance=ExtResource( 5 )]
stream = SubResource( 60 )
audio_streams = [ ExtResource( 7 ), ExtResource( 9 ), ExtResource( 8 ), ExtResource( 10 ), ExtResource( 11 ), ExtResource( 6 ) ]

[node name="Knock2" parent="." index="7" instance=ExtResource( 5 )]
stream = SubResource( 60 )
audio_streams = [ ExtResource( 7 ), ExtResource( 9 ), ExtResource( 8 ), ExtResource( 10 ), ExtResource( 11 ), ExtResource( 6 ) ]

[node name="Waypoints" parent="." index="8" instance=ExtResource( 13 )]
z_index = 597
has_start_point = false

[node name="Position2D" type="Position2D" parent="Waypoints" index="0"]
position = Vector2( 290, 228 )

[node name="Position2D2" type="Position2D" parent="Waypoints" index="1"]
position = Vector2( 326, 249 )

[node name="Position2D3" type="Position2D" parent="Waypoints" index="2"]
position = Vector2( 257, 248 )

[node name="Position2D4" type="Position2D" parent="Waypoints" index="3"]
position = Vector2( 386, 253 )

[node name="GhostPoints" parent="." index="9" instance=ExtResource( 13 )]
position = Vector2( -32, -1 )

[node name="Position2D" type="Position2D" parent="GhostPoints" index="0"]
position = Vector2( 322, -5 )

[node name="Position2D2" type="Position2D" parent="GhostPoints" index="1"]
position = Vector2( 126, 95 )

[node name="Position2D7" type="Position2D" parent="GhostPoints" index="2"]
position = Vector2( 183, 144 )

[node name="Position2D8" type="Position2D" parent="GhostPoints" index="3"]
position = Vector2( 250, 109 )

[node name="Position2D3" type="Position2D" parent="GhostPoints" index="4"]
position = Vector2( 257, 231 )

[node name="Position2D4" type="Position2D" parent="GhostPoints" index="5"]
position = Vector2( 279, 241 )

[node name="Position2D5" type="Position2D" parent="GhostPoints" index="6"]
position = Vector2( 301, 249 )

[node name="Position2D6" type="Position2D" parent="GhostPoints" index="7"]
position = Vector2( 351, 251 )

[node name="FlashbackPoints" parent="." index="10" instance=ExtResource( 13 )]

[node name="Position2D" type="Position2D" parent="FlashbackPoints" index="0"]
position = Vector2( 290, 228 )

[node name="Position2D2" type="Position2D" parent="FlashbackPoints" index="1"]
position = Vector2( 68, 101 )

[node name="Position2D3" type="Position2D" parent="FlashbackPoints" index="2"]
position = Vector2( 106, 72 )

[node name="Position2D4" type="Position2D" parent="FlashbackPoints" index="3"]
position = Vector2( 168, 134 )

[node name="Position2D5" type="Position2D" parent="FlashbackPoints" index="4"]
position = Vector2( 148, 115 )

[node name="Position2D6" type="Position2D" parent="FlashbackPoints" index="5"]
position = Vector2( 290, 228 )

[node name="YSort2" type="YSort" parent="." index="11"]

[node name="OldSelfPuppet" parent="YSort2" index="0" instance=ExtResource( 12 )]
material = SubResource( 62 )
position = Vector2( 298, -10 )
frame = 3
waypoints_path = NodePath("../../GhostPoints")
muted = true
outside = true

[node name="NewSelfPuppet" parent="YSort2" index="1" instance=ExtResource( 12 )]
visible = false
material = SubResource( 63 )
position = Vector2( 369, 200 )
animation = "idle3"
frame = 2
waypoints_path = NodePath("../../FlashbackPoints")
act = "3"
outside = true
start_left = true

[node name="NewSelfOut" parent="YSort2" index="2" instance=ExtResource( 12 )]
visible = false
material = SubResource( 67 )
position = Vector2( 257, 248 )
frame = 3
act = "3"
outside = true
start_left = true

[node name="DoorOpen" type="AudioStreamPlayer2D" parent="." index="12"]
position = Vector2( 246, 215 )
stream = ExtResource( 16 )
bus = "SFX"

[node name="DoorClose" type="AudioStreamPlayer2D" parent="." index="13"]
position = Vector2( 246, 215 )
stream = ExtResource( 18 )
volume_db = 10.0
bus = "SFX"

[node name="MinigamesManager" parent="." index="14"]
max_points = 300
character = 1
start_difficulty = 0.1

[connection signal="finished_eating" from="YSort/RoomElements/FoodSpawner" to="." method="_on_FoodSpawner_finished_eating"]
[connection signal="food_ate" from="YSort/RoomElements/FoodSpawner" to="." method="_on_FoodSpawner_food_ate"]
[connection signal="completed_task" from="MinigamesManager" to="." method="_on_MinigamesManager_completed_task"]
[connection signal="do_event" from="MinigamesManager" to="." method="_on_MinigamesManager_do_event"]
[connection signal="view_street" from="MinigamesManager" to="." method="_on_MinigamesManager_view_street"]
